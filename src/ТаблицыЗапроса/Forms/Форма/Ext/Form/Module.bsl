
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицы(Команда)
	
	ОбновитьОбновитьТаблицыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьОбновитьТаблицыНаСервере()

	ТаблицыЗапроса.Очистить();
	
	Схема = Новый СхемаЗапроса();
	Попытка
		Схема.УстановитьТекстЗапроса(ТекстЗапроса.ПолучитьТекст());
	Исключение
		Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтрШаблон("Ошибка в тексте запроса%1%2", Символы.ПС, Ошибка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	Для Каждого ЗапросПакета Из Схема.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда 
			Продолжить;
		КонецЕсли;
		
		ВсеТаблицыЗапроса(ТаблицыЗапроса, ЗапросПакета);
		
	КонецЦикла;
	
	ТаблицыЗапроса.СортироватьПоЗначению();
	
КонецПроцедуры

&НаСервере
Процедура ВсеТаблицыЗапроса(Список, ЗапросВыбора)
	
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл 
		
		Для Каждого ИсточникСхемы Из Оператор.Источники Цикл
			
			Если ЭтоТаблицаБазыДанных(ИсточникСхемы) Тогда 
				ДобавитьТаблицуВСписок(Список, ИсточникСхемы.Источник.ИмяТаблицы);
				// В условиях параметров виртуальных таблиц могут так же быть запросы данных
				// с обращениями к физическим таблицам базы. Пока механизм разбора текста
				// параметров не работает - оставлю на будущее.
				ОбработатьПараметрыИсточника(Список, ИсточникСхемы.Источник.Параметры);
			ИначеЕсли ЭтоВложенныйЗапрос(ИсточникСхемы) Тогда 
				ВсеТаблицыЗапроса(Список, ИсточникСхемы.Источник.Запрос);
			Иначе // ОписаниеВременнойТаблицыСхемыЗапроса нам здесь не нужны
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуВСписок(Список, Таблица)

	Если Список.НайтиПоЗначению(Таблица) = Неопределено Тогда
		Список.Добавить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидыТаблицИнформационнойБазы()

	ВидыТаблиц = Новый Массив;
	ВидыТаблиц.Добавить("КритерийОтбора");
	ВидыТаблиц.Добавить("Документ");
	ВидыТаблиц.Добавить("ПланОбмена");
	ВидыТаблиц.Добавить("Константа");
	ВидыТаблиц.Добавить("Справочник");
	ВидыТаблиц.Добавить("ЖурналДокументов");
	ВидыТаблиц.Добавить("Перечисление");
	ВидыТаблиц.Добавить("ПланВидовХарактеристик");
	ВидыТаблиц.Добавить("РегистрБухгалтерии");
	ВидыТаблиц.Добавить("РегистрНакопления");
	ВидыТаблиц.Добавить("РегистрСведений");
	ВидыТаблиц.Добавить("БизнесПроцесс");
	ВидыТаблиц.Добавить("Задача");

	Возврат ВидыТаблиц;
	
КонецФункции

&НаСервере
Функция ЭтоТаблицаБазыДанных(ИсточникСхемы)
	
	ИсточникДанных = ИсточникСхемы.Источник;

	Если ТипЗнч(ИсточникДанных) <> Тип("ТаблицаСхемыЗапроса") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВидТаблицы(ИсточникДанных.ИмяТаблицы) <> Неопределено;

КонецФункции

&НаСервере
Функция ЭтоВложенныйЗапрос(ИсточникСхемы)
	
	ИсточникДанных = ИсточникСхемы.Источник;

	Возврат ТипЗнч(ИсточникДанных) = Тип("ВложенныйЗапросСхемыЗапроса"); 

КонецФункции

&НаСервере
Функция ВидТаблицы(ИмяТаблицы)
	
	ЧастиИмениТаблицы = СтрРазделить(ИмяТаблицы, ".");
	
	Если ЧастиИмениТаблицы.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидыТаблицИнформационнойБазы().Найти(ЧастиИмениТаблицы[0]) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЧастиИмениТаблицы[0];
	
КонецФункции

#Область НеРаботающиеМетоды

// Не работает. Требуется завершение реализации метода.
//
&НаСервере
Процедура ОбработатьПараметрыИсточника(Список, ПараметрыИсточника)

	Для Каждого ПараметрИсточника Из ПараметрыИсточника Цикл
		ТекстыЗапросов = ВыделитьТекстыЗапросовИзСтрокиПараметров(ПараметрИсточника.Выражение);
	КонецЦикла;

КонецПроцедуры

// Не работает. Требуется завершение реализации метода.
//
&НаСервере
Функция ВыделитьТекстыЗапросовИзСтрокиПараметров(Знач Выражение)

	ТекстыЗапросов = Новый Массив;
	
	ТекстВыражения = Строка(Выражение);
	ТекстВыраженияБезПС = СтрЗаменить(ТекстВыражения, Символы.ПС, " ");
	ТекстВыраженияБезПС = СтрЗаменить(ТекстВыраженияБезПС, Символы.Таб, " ");
	ТекстВыраженияБезПС = СтрЗаменить(ТекстВыраженияБезПС, Символы.НПП, " ");
	ТекстВыраженияБезПробелов = ВРег(СтрЗаменить(ТекстВыраженияБезПС, " ", ""));
	Если СтрНайти(ТекстВыраженияБезПробелов, "(ВЫБРАТЬ") = 0 Тогда
		Возврат ТекстыЗапросов;
	КонецЕсли;
		
	ЧастиВыражения = СтрРазделить(ТекстВыраженияБезПС, " ", Ложь);
	Для Каждого Часть Из ЧастиВыражения Цикл 

	КонецЦикла;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

#КонецОбласти

#КонецОбласти




